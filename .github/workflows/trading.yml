name: Crypto Trading Automation

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      scripts:
        description: 'Comma-separated scripts to run (e.g., cancel_pending_triggers,create_algo_triggers)'
        required: false
        default: 'monitor_delist,cancel_pending_limits,fetch_filled_orders,auto_sell_orders'

  # Cloudflare Worker trigger
  repository_dispatch:
    types: [cron]

# Dynamic run name
run-name: |
  ${{ github.event_name == 'workflow_dispatch' && format('Manual: {0}', github.event.inputs.scripts) || format('Auto: {0}', join(github.event.client_payload.scripts, ', ')) }}

# Concurrency control
concurrency:
  group: "trading-${{ github.event.client_payload.scripts || github.event.inputs.scripts || 'default' }}"
  cancel-in-progress: false

jobs:
  trading:
    name: Crypto Trading Bot
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Show payload and execution info
        run: |
          echo "🕐 Workflow started at: $(date -u)"
          echo "🕐 UTC time: $(date -u +%Y-%m-%d\ %H:%M:%S\ UTC)"
          echo "🕐 Event type: ${{ github.event_name }}"
          echo "=========================================="
          echo "📋 Full payload:"
          echo '${{ toJson(github.event.client_payload) }}' | jq .
          echo "=========================================="
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "🎯 MANUAL TRIGGER - Scripts: ${{ github.event.inputs.scripts }}"
          elif [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "🤖 AUTO TRIGGER - Scripts: ${{ join(github.event.client_payload.scripts, ', ') }}"
            echo "📅 Cron schedule: ${{ github.event.client_payload.cron_schedule }}"
            echo "⏰ Interval: ${{ github.event.client_payload.interval }}"
          fi
          echo "=========================================="
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV

      # Optimized pip caching strategy
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-py311-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-py311-
            pip-${{ runner.os }}-

      # Fast dependency installation with optimizations
      - name: Install dependencies (optimized)
        run: |
          mkdir -p logs
          echo "📦 Starting optimized dependency installation..."
          
          # Upgrade pip first (usually cached)
          pip install --upgrade pip
          
          # Install with optimizations for speed
          pip install \
            --no-warn-script-location \
            --disable-pip-version-check \
            --no-compile \
            --prefer-binary \
            -r requirements.txt \
            2>&1 | tee logs/pip_install.log
          
          echo "✅ Dependencies installed successfully"
      
      - name: Initialize executed scripts list
        run: |
          : > logs/executed_scripts.txt
          
      - name: Verify installation
        run: |
          echo "🔍 Verifying Python environment..."
          python --version
          pip list | grep -E "(requests|python-okx|psycopg2|tenacity|python-dotenv)" || echo "Some packages not found"
          echo "✅ Environment verification complete"
          
      - name: Select and run scripts
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          OKX_API_KEY: ${{ secrets.OKX_API_KEY }}
          OKX_SECRET_KEY: ${{ secrets.OKX_SECRET_KEY }}
          OKX_PASSPHRASE: ${{ secrets.OKX_PASSPHRASE }}
          OKX_ORDER_SIZE: ${{ secrets.OKX_ORDER_SIZE }}
          OKX_TESTNET: false
        run: |
          set -e
          
          # Get scripts list
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            SCRIPTS_RAW="${{ github.event.inputs.scripts }}"
            # Convert comma-separated to space-separated
            SCRIPTS=$(echo "$SCRIPTS_RAW" | tr ',' ' ')
          else
            SCRIPTS="${{ join(github.event.client_payload.scripts, ' ') }}"
          fi
          
          echo "Will run scripts: $SCRIPTS"
          echo "Scripts to execute: $SCRIPTS" >> logs/executed_scripts.txt
          
          # Execute each script
          for script in $SCRIPTS; do
            case "$script" in
              monitor_delist)
                echo "🔄 Running monitor_delist.py..."
                python monitor_delist.py || echo "⚠️ monitor_delist.py completed with warnings"
                echo "monitor_delist.py" >> logs/executed_scripts.txt
                ;;
              cancel_pending_limits)
                echo "🔄 Running cancel_pending_limits.py..."
                python cancel_pending_limits.py --side buy || echo "⚠️ cancel_pending_limits.py completed with warnings"
                echo "cancel_pending_limits.py" >> logs/executed_scripts.txt
                ;;
              fetch_filled_orders)
                echo "🔄 Running fetch_filled_orders.py..."
                python fetch_filled_orders.py || echo "⚠️ fetch_filled_orders.py completed with warnings"
                echo "fetch_filled_orders.py" >> logs/executed_scripts.txt
                ;;
              auto_sell_orders)
                echo "🔄 Running auto_sell_orders.py..."
                python auto_sell_orders.py || echo "⚠️ auto_sell_orders.py completed with warnings"
                echo "auto_sell_orders.py" >> logs/executed_scripts.txt
                ;;
              cancel_pending_triggers)
                echo "🔄 Running cancel_pending_triggers.py..."
                python cancel_pending_triggers.py || echo "⚠️ cancel_pending_triggers.py completed with warnings"
                echo "cancel_pending_triggers.py" >> logs/executed_scripts.txt
                ;;
              create_algo_triggers)
                echo "🔄 Running create_algo_triggers.py..."
                python create_algo_triggers.py || echo "⚠️ create_algo_triggers.py completed with warnings"
                echo "create_algo_triggers.py" >> logs/executed_scripts.txt
                ;;
              *)
                echo "❌ Unknown script: $script"
                ;;
            esac
          done

      - name: Write run summary
        if: always()
        run: |
          echo "### 📊 Execution Summary" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "**Workflow:** ${{ github.workflow }}" >> "$GITHUB_STEP_SUMMARY"
          echo "**Trigger:** ${{ github.event_name }}" >> "$GITHUB_STEP_SUMMARY"
          echo "**Time:** $(date -u)" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "### 🚀 Executed Scripts" >> "$GITHUB_STEP_SUMMARY"
          if [ -s logs/executed_scripts.txt ]; then
            grep -v "Scripts to execute:" logs/executed_scripts.txt | sort -u | sed 's/^/- ✅ /' >> "$GITHUB_STEP_SUMMARY"
          else
            echo "- ❌ None" >> "$GITHUB_STEP_SUMMARY"
          fi
          
      - name: Upload logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trading-logs-${{ github.run_id }}-${{ github.run_attempt }}
          path: |
            logs/**
            *.log
          if-no-files-found: ignore
          retention-days: 7