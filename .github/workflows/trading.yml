name: Crypto Trading Automation

on:
  # ÊâãÂä®Ëß¶Âèë
  workflow_dispatch:
    inputs:
      scripts:
        description: 'Comma-separated scripts to run (e.g., cancel_pending_triggers,create_algo_triggers)'
        required: false
        default: 'monitor_delist,cancel_pending_limits,fetch_filled_orders,auto_sell_orders'

  # Cloudflare Worker Ëß¶Âèë
  repository_dispatch:
    types: [cron]

jobs:
  trading:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Log execution time
        run: |
          echo "üïê Workflow started at: $(date -u)"
          echo "üïê UTC time: $(date -u +%Y-%m-%d\ %H:%M:%S\ UTC)"
          echo "üïê Cron schedule: ${{ github.event.schedule || 'manual' }}"
          echo "üïê Event type: ${{ github.event_name }}"
          echo "üß∞ Scripts payload: ${{ toJSON(github.event.client_payload.scripts) }}"
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      # Á¨¨‰∏ÄÂ±ÇÔºöÁºìÂ≠ò uv ÂåÖÁÆ°ÁêÜÂô®
      - name: Cache uv binary
        uses: actions/cache@v4
        with:
          path: ~/.local/bin/uv
          key: uv-binary-${{ runner.os }}-py311
          restore-keys: |
            uv-binary-${{ runner.os }}-

      # Á¨¨‰∫åÂ±ÇÔºöÁºìÂ≠ò uv ‰∏ãËΩΩÁöÑÂåÖ
      - name: Cache uv packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: uv-packages-${{ runner.os }}-py311-${{ hashFiles('uv.lock', 'pyproject.toml', 'requirements.txt') }}
          restore-keys: |
            uv-packages-${{ runner.os }}-py311-
            uv-packages-${{ runner.os }}-

      # Á¨¨‰∏âÂ±ÇÔºöÁºìÂ≠ò Python ËôöÊãüÁéØÂ¢É
      - name: Cache Python venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: python-venv-${{ runner.os }}-py311-${{ hashFiles('uv.lock', 'pyproject.toml', 'requirements.txt') }}
          restore-keys: |
            python-venv-${{ runner.os }}-py311-
            python-venv-${{ runner.os }}-

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install dependencies
        run: |
          mkdir -p logs
          set -o pipefail
          ~/.local/bin/uv sync --locked 2>&1 | tee logs/uv_install.log
          
      - name: Activate virtual environment
        run: |
          source .venv/bin/activate
          echo "‚úÖ Virtual environment activated"
          
      - name: Run monitoring and protection
        if: (github.event_name == 'workflow_dispatch' && contains(github.event.inputs.scripts, 'monitor_delist')) || (github.event_name == 'repository_dispatch' && github.event.action == 'cron' && contains(toJSON(github.event.client_payload.scripts), 'monitor_delist'))
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          OKX_API_KEY: ${{ secrets.OKX_API_KEY }}
          OKX_SECRET_KEY: ${{ secrets.OKX_SECRET_KEY }}
          OKX_PASSPHRASE: ${{ secrets.OKX_PASSPHRASE }}
        run: |
          echo "üîÑ Running monitor_delist.py..."
          source .venv/bin/activate && python monitor_delist.py || echo "‚ö†Ô∏è monitor_delist.py completed with warnings"
          
      - name: Run auto sell orders
        if: (github.event_name == 'workflow_dispatch' && contains(github.event.inputs.scripts, 'auto_sell_orders')) || (github.event_name == 'repository_dispatch' && github.event.action == 'cron' && contains(github.event.client_payload.scripts, 'auto_sell_orders'))
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          OKX_API_KEY: ${{ secrets.OKX_API_KEY }}
          OKX_SECRET_KEY: ${{ secrets.OKX_SECRET_KEY }}
          OKX_PASSPHRASE: ${{ secrets.OKX_PASSPHRASE }}
        run: |
          echo "üîÑ Running auto_sell_orders.py..."
          source .venv/bin/activate && python auto_sell_orders.py || echo "‚ö†Ô∏è auto_sell_orders.py completed with warnings"
          
      - name: Run fetch filled orders
        if: (github.event_name == 'workflow_dispatch' && contains(github.event.inputs.scripts, 'fetch_filled_orders')) || (github.event_name == 'repository_dispatch' && github.event.action == 'cron' && contains(github.event.client_payload.scripts, 'fetch_filled_orders'))
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          OKX_API_KEY: ${{ secrets.OKX_API_KEY }}
          OKX_SECRET_KEY: ${{ secrets.OKX_SECRET_KEY }}
          OKX_PASSPHRASE: ${{ secrets.OKX_PASSPHRASE }}
        run: |
          echo "üîÑ Running fetch_filled_orders.py..."
          source .venv/bin/activate && python fetch_filled_orders.py || echo "‚ö†Ô∏è fetch_filled_orders.py completed with warnings"
          
      - name: Run cancel pending limits
        if: (github.event_name == 'workflow_dispatch' && contains(github.event.inputs.scripts, 'cancel_pending_limits')) || (github.event_name == 'repository_dispatch' && github.event.action == 'cron' && contains(toJSON(github.event.client_payload.scripts), 'cancel_pending_limits'))
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          OKX_API_KEY: ${{ secrets.OKX_API_KEY }}
          OKX_SECRET_KEY: ${{ secrets.OKX_SECRET_KEY }}
          OKX_PASSPHRASE: ${{ secrets.OKX_PASSPHRASE }}
        run: |
          echo "üîÑ Running cancel_pending_limits.py..."
          source .venv/bin/activate && python cancel_pending_limits.py --side buy || echo "‚ö†Ô∏è cancel_pending_limits.py completed with warnings"
          
      - name: Run cancel pending triggers (nightly)
        if: (github.event_name == 'workflow_dispatch' && contains(github.event.inputs.scripts, 'cancel_pending_triggers')) || (github.event_name == 'repository_dispatch' && github.event.action == 'cron' && contains(toJSON(github.event.client_payload.scripts), 'cancel_pending_triggers'))
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          OKX_API_KEY: ${{ secrets.OKX_API_KEY }}
          OKX_SECRET_KEY: ${{ secrets.OKX_SECRET_KEY }}
          OKX_PASSPHRASE: ${{ secrets.OKX_PASSPHRASE }}
        run: |
          echo "üîÑ Running cancel_pending_triggers.py..."
          source .venv/bin/activate && python cancel_pending_triggers.py || echo "‚ö†Ô∏è cancel_pending_triggers.py completed with warnings"
          
      - name: Run create algo triggers (nightly)
        if: (github.event_name == 'workflow_dispatch' && contains(github.event.inputs.scripts, 'create_algo_triggers')) || (github.event_name == 'repository_dispatch' && github.event.action == 'cron' && contains(toJSON(github.event.client_payload.scripts), 'create_algo_triggers'))
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          OKX_API_KEY: ${{ secrets.OKX_API_KEY }}
          OKX_SECRET_KEY: ${{ secrets.OKX_SECRET_KEY }}
          OKX_PASSPHRASE: ${{ secrets.OKX_PASSPHRASE }}
        run: |
          echo "üîÑ Running create_algo_triggers.py..."
          source .venv/bin/activate && python create_algo_triggers.py || echo "‚ö†Ô∏è create_algo_triggers.py completed with warnings"
          
      - name: Upload logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trading-logs-${{ github.run_id }}
          path: |
            logs/**
            *.log
          if-no-files-found: ignore
          retention-days: 7
